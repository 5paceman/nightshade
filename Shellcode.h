#pragma once
#include <Windows.h>
#include <winnt.h>
#include "Utils.h"
#include "NtDefinitions.h"

using f_LoadLibraryA = HINSTANCE(WINAPI*)(const char*);
using f_GetProcAddress = UINT_PTR(WINAPI*)(HMODULE, const char*);
#ifdef _WIN64
using f_RtlAddFunctionTable = BOOLEAN(WINAPI*)(PRUNTIME_FUNCTION, DWORD, DWORD64);
#endif
using f_DLL_ENTRY_POINT = BOOL(WINAPI*)(void*, DWORD, void*);

struct MANUAL_MAPPING_DATA {
	f_LoadLibraryA pLoadLibraryA;
	f_GetProcAddress pGetProcAddress;
#ifdef _WIN64
	f_RtlAddFunctionTable pRtlAddFunctionAble;
#endif
	HINSTANCE hMod;
};

#define RELOC_FLAG32(RelInfo) ((RelInfo >> 0x0C) == IMAGE_REL_BASED_HIGHLOW)
#define RELOC_FLAG64(RelInfo) ((RelInfo >> 0x0C) == IMAGE_REL_BASED_DIR64)
#ifdef _WIN64
#define RELOC_FLAG RELOC_FLAG64
#else
#define RELOC_FLAG RELOC_FLAG32
#endif

BYTE x32ManualMapShellcode[] = { 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x14, 0x53, 0x56, 0x57, 0x8B, 0x7D, 0x08, 0x8B, 0x4F, 0x3C, 0x8B, 0x47, 0x04, 0x03, 0xCF, 0x8B, 0x17, 0x89, 0x45, 0xFC, 0x89, 0x4D, 0xF0, 0x8B, 0x41, 0x28, 0x03, 0xC7, 0x89, 0x55, 0xF4, 0x89, 0x45, 0xEC, 0x8B, 0xC7, 0x2B, 0x41, 0x34, 0x89, 0x45, 0x08, 0x74, 0x6B, 0x83, 0xB9, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x05, 0x01, 0x00, 0x00, 0x8B, 0x99, 0xA0, 0x00, 0x00, 0x00, 0x03, 0xDF, 0x83, 0x3B, 0x00, 0x74, 0x51, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x8B, 0x73, 0x04, 0x8D, 0x43, 0x04, 0x83, 0xEE, 0x08, 0x89, 0x45, 0xF8, 0xD1, 0xEE, 0x8D, 0x53, 0x08, 0x74, 0x2C, 0x0F, 0xB7, 0x02, 0x8B, 0xC8, 0x81, 0xE1, 0x00, 0xF0, 0x00, 0x00, 0x81, 0xF9, 0x00, 0x30, 0x00, 0x00, 0x75, 0x0E, 0x8B, 0x4D, 0x08, 0x25, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xC7, 0x03, 0x03, 0x01, 0x08, 0x83, 0xC2, 0x02, 0x83, 0xEE, 0x01, 0x75, 0xD7, 0x8B, 0x45, 0xF8, 0x03, 0x18, 0x83, 0x3B, 0x00, 0x75, 0xBA, 0x8B, 0x4D, 0xF0, 0x8B, 0x55, 0xF4, 0x83, 0xB9, 0x84, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6A, 0x8B, 0x99, 0x80, 0x00, 0x00, 0x00, 0x03, 0xDF, 0x89, 0x5D, 0xF8, 0x83, 0x7B, 0x0C, 0x00, 0x74, 0x59, 0x8B, 0x43, 0x0C, 0x03, 0xC7, 0x50, 0xFF, 0xD2, 0x8B, 0x13, 0x8B, 0x73, 0x10, 0x89, 0x45, 0x08, 0x8D, 0x0C, 0x3A, 0x85, 0xC9, 0x8D, 0x1C, 0x3E, 0x0F, 0x45, 0xF2, 0x03, 0xF7, 0x8B, 0x06, 0x85, 0xC0, 0x74, 0x21, 0x79, 0x05, 0x0F, 0xB7, 0xC0, 0xEB, 0x05, 0x83, 0xC0, 0x02, 0x03, 0xC7, 0x50, 0xFF, 0x75, 0x08, 0xFF, 0x55, 0xFC, 0x83, 0xC6, 0x04, 0x89, 0x03, 0x83, 0xC3, 0x04, 0x8B, 0x06, 0x85, 0xC0, 0x75, 0xDF, 0x8B, 0x5D, 0xF8, 0x8B, 0x55, 0xF4, 0x83, 0xC3, 0x14, 0x89, 0x5D, 0xF8, 0x83, 0x7B, 0x0C, 0x00, 0x75, 0xAA, 0x8B, 0x4D, 0xF0, 0x83, 0xB9, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x20, 0x8B, 0x81, 0xC0, 0x00, 0x00, 0x00, 0x8B, 0x74, 0x38, 0x0C, 0x85, 0xF6, 0x74, 0x12, 0x8B, 0x06, 0x85, 0xC0, 0x74, 0x0C, 0x6A, 0x00, 0x6A, 0x01, 0x57, 0xFF, 0xD0, 0x83, 0xC6, 0x04, 0x75, 0xEE, 0x6A, 0x00, 0x6A, 0x01, 0x57, 0xFF, 0x55, 0xEC, 0x89, 0x7F, 0x08, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00 };
BYTE x64ManualMapShellcode[] = { 0x40, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x28, 0x4C, 0x63, 0x61, 0x3C, 0x4C, 0x8B, 0xD9, 0x48, 0x8B, 0x01, 0x4C, 0x03, 0xE1, 0x4C, 0x8B, 0x79, 0x08, 0x48, 0x8B, 0xF1, 0x48, 0x89, 0x44, 0x24, 0x60, 0x45, 0x8B, 0x6C, 0x24, 0x28, 0x4C, 0x03, 0xE9, 0x4C, 0x89, 0x6C, 0x24, 0x68, 0x4D, 0x2B, 0x5C, 0x24, 0x30, 0x0F, 0x84, 0x88, 0x00, 0x00, 0x00, 0x41, 0x83, 0xBC, 0x24, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x6D, 0x01, 0x00, 0x00, 0x45, 0x8B, 0x8C, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x4C, 0x03, 0xC9, 0x41, 0x83, 0x39, 0x00, 0x74, 0x68, 0xBB, 0x00, 0xF0, 0x00, 0x00, 0xBF, 0x00, 0xA0, 0x00, 0x00, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x41, 0x04, 0x4D, 0x8D, 0x41, 0x08, 0x48, 0x83, 0xE8, 0x08, 0x48, 0xD1, 0xE8, 0x85, 0xC0, 0x74, 0x37, 0x44, 0x8B, 0xD0, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0F, 0xB7, 0x10, 0x0F, 0xB7, 0xC2, 0x66, 0x23, 0xC3, 0x66, 0x3B, 0xC7, 0x75, 0x11, 0x41, 0x8B, 0x09, 0x81, 0xE2, 0xFF, 0x0F, 0x00, 0x00, 0x48, 0x8D, 0x04, 0x16, 0x4C, 0x01, 0x1C, 0x01, 0x49, 0x83, 0xC0, 0x02, 0x49, 0x83, 0xEA, 0x01, 0x75, 0xD6, 0x41, 0x8B, 0x41, 0x04, 0x4C, 0x03, 0xC8, 0x41, 0x83, 0x39, 0x00, 0x75, 0xA9, 0x41, 0x83, 0xBC, 0x24, 0x94, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x9B, 0x00, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x20, 0x45, 0x8B, 0xB4, 0x24, 0x90, 0x00, 0x00, 0x00, 0x4C, 0x03, 0xF6, 0x41, 0x83, 0x7E, 0x0C, 0x00, 0x74, 0x7F, 0x4C, 0x8B, 0x6C, 0x24, 0x60, 0x48, 0x89, 0x6C, 0x24, 0x70, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8B, 0x4E, 0x0C, 0x48, 0x03, 0xCE, 0x41, 0xFF, 0xD5, 0x45, 0x8B, 0x06, 0x48, 0x8B, 0xE8, 0x41, 0x8B, 0x56, 0x10, 0x49, 0x8D, 0x0C, 0x30, 0x48, 0x85, 0xC9, 0x48, 0x8D, 0x3C, 0x32, 0x41, 0x0F, 0x45, 0xD0, 0x48, 0x8B, 0x0C, 0x32, 0x48, 0x8D, 0x1C, 0x32, 0x48, 0x85, 0xC9, 0x74, 0x27, 0x79, 0x05, 0x0F, 0xB7, 0xD1, 0xEB, 0x07, 0x48, 0x8D, 0x56, 0x02, 0x48, 0x03, 0xD1, 0x48, 0x8B, 0xCD, 0x41, 0xFF, 0xD7, 0x48, 0x83, 0xC3, 0x08, 0x48, 0x89, 0x07, 0x48, 0x83, 0xC7, 0x08, 0x48, 0x8B, 0x0B, 0x48, 0x85, 0xC9, 0x75, 0xD9, 0x49, 0x83, 0xC6, 0x14, 0x41, 0x83, 0x7E, 0x0C, 0x00, 0x75, 0x9E, 0x4C, 0x8B, 0x6C, 0x24, 0x68, 0x48, 0x8B, 0x6C, 0x24, 0x70, 0x4C, 0x8B, 0x74, 0x24, 0x20, 0x41, 0x83, 0xBC, 0x24, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2E, 0x41, 0x8B, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x5C, 0x30, 0x18, 0x48, 0x85, 0xDB, 0x74, 0x1C, 0x66, 0x90, 0x48, 0x8B, 0x03, 0x48, 0x85, 0xC0, 0x74, 0x12, 0x45, 0x33, 0xC0, 0x48, 0x8B, 0xCE, 0x41, 0x8D, 0x50, 0x01, 0xFF, 0xD0, 0x48, 0x83, 0xC3, 0x08, 0x75, 0xE6, 0x45, 0x33, 0xC0, 0x48, 0x8B, 0xCE, 0x41, 0x8D, 0x50, 0x01, 0x41, 0xFF, 0xD5, 0x48, 0x89, 0x76, 0x10, 0x48, 0x83, 0xC4, 0x28, 0x41, 0x5F, 0x41, 0x5D, 0x41, 0x5C, 0x5F, 0x5E, 0x5B, 0xC3 };

#define COMPILE_SHELLCODE

#ifdef COMPILE_SHELLCODE

void __stdcall ManualMapShellcode(MANUAL_MAPPING_DATA* data)
{
	BYTE* pBase = RCast<BYTE*>(data);
	IMAGE_OPTIONAL_HEADER* pOpt = &RCast<IMAGE_NT_HEADERS*>(pBase + RCast<IMAGE_DOS_HEADER*>(pBase)->e_lfanew)->OptionalHeader;

	f_LoadLibraryA _LoadLibraryA = data->pLoadLibraryA;
	f_GetProcAddress _GetProcAddress = data->pGetProcAddress;
#ifdef _WIN64
	f_RtlAddFunctionTable _RtlAddFunctionTable = data->pRtlAddFunctionTable;
#endif
	f_DLL_ENTRY_POINT _DllMain = RCast<f_DLL_ENTRY_POINT>(pBase + pOpt->AddressOfEntryPoint);

	BYTE* LocationDelta = pBase - pOpt->ImageBase;
	if (LocationDelta)
	{
		if (!pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size)
			return;

		IMAGE_BASE_RELOCATION* pRelocData = RCast<IMAGE_BASE_RELOCATION*>(pBase + pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
		while (pRelocData->VirtualAddress)
		{
			UINT AmountOfEntry = (pRelocData->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
			WORD* pRelativeInfo = RCast<WORD*>(pRelocData + 1);
			for (UINT i = 0; i != AmountOfEntry; i++, pRelativeInfo++)
			{
				if (RELOC_FLAG(*pRelativeInfo))
				{
					UINT_PTR* pPatch = RCast<UINT_PTR*>(pBase + pRelocData->VirtualAddress + ((*pRelativeInfo) & 0xFFF));
					*pPatch += RCast<UINT_PTR>(LocationDelta);
				}
			}
			pRelocData = RCast<IMAGE_BASE_RELOCATION*>(RCast<BYTE*>(pRelocData) + pRelocData->SizeOfBlock);
		}
	}

	if (pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size)
	{
		IMAGE_IMPORT_DESCRIPTOR* pImportDesc = RCast<IMAGE_IMPORT_DESCRIPTOR*>(pBase + pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
		while (pImportDesc->Name)
		{
			char* szMod = RCast<char*>(pBase + pImportDesc->Name);
			HINSTANCE hDll = _LoadLibraryA(szMod);
			ULONG_PTR* pThunkRef = RCast<ULONG_PTR*>(pBase + pImportDesc->OriginalFirstThunk);
			ULONG_PTR* pFuncRef = RCast<ULONG_PTR*>(pBase + pImportDesc->FirstThunk);

			if (!pThunkRef)
				pThunkRef = pFuncRef;

			for (; *pThunkRef; pThunkRef++, pFuncRef++)
			{
				if (IMAGE_SNAP_BY_ORDINAL(*pThunkRef))
				{
					*pFuncRef = _GetProcAddress(hDll, RCast<char*>(*pThunkRef & 0xFFFF));
				}
				else {
					auto* pImport = reinterpret_cast<IMAGE_IMPORT_BY_NAME*>(pBase + (*pThunkRef));
					*pFuncRef = _GetProcAddress(hDll, pImport->Name);
				}
			}
			++pImportDesc;
		}
	}

	if (pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS].Size)
	{
		IMAGE_TLS_DIRECTORY* pTLS = RCast<IMAGE_TLS_DIRECTORY*>(pBase + pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS].VirtualAddress);
		PIMAGE_TLS_CALLBACK* pCallback = RCast<PIMAGE_TLS_CALLBACK*>(pTLS->AddressOfCallBacks);
		for (; pCallback && *pCallback; pCallback++)
		{
			(*pCallback)(pBase, DLL_PROCESS_ATTACH, nullptr);
		}
	}

#ifdef _WIN64
	if (pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].Size)
	{
		auto funcEntry = RCast<IMAGE_RUNTIME_FUNCTION_ENTRY*>(pBase + pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].VirtualAddress);
		if (funcEntry)
		{
			DWORD Count = (pOpt->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].Size / sizeof(IMAGE_RUNTIME_FUNCTION_ENTRY)) - 1;
			_RtlAddFunctionTable((PRUNTIME_FUNCTION)funcEntry, Count, (DWORD64)pBase);
		}
	}
#endif
	_DllMain(pBase, DLL_PROCESS_ATTACH, nullptr);

	data->hMod = RCast<HINSTANCE>(pBase);
}

#endif

using f_LdrLoadDll = NTSTATUS(NTAPI*)(PWCHAR, ULONG, PUNICODE_STRING, PHANDLE);
using f_RtlInitUnicodeString = void(NTAPI*)(PUNICODE_STRING, PCWSTR);

struct LDR_LOAD_DLL_DATA {
	f_LdrLoadDll pLdrLoadDll;
	f_RtlInitUnicodeString pRtlInitUnicodeString;
	const wchar_t* dllName;
	HANDLE hDll;
};

BYTE x32LdrLoadDllShellcode[] = {0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x0C, 0x8B, 0x45, 0x08, 0x8D, 0x4D, 0xF4, 0x56, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x70, 0x08, 0x8B, 0x30, 0x8B, 0x40, 0x04, 0x51, 0xFF, 0xD0, 0x8D, 0x45, 0xFC, 0x50, 0x8D, 0x45, 0xF4, 0x50, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0xD6, 0x5E, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00};
BYTE x64LdrLoadDllShellcode[] = {0x40, 0x53, 0x48, 0x83, 0xEC, 0x30, 0x48, 0x8B, 0x19, 0x48, 0x8B, 0xC1, 0x48, 0x8B, 0x51, 0x10, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0x48, 0xC7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x50, 0x08, 0x4C, 0x8D, 0x4C, 0x24, 0x40, 0x33, 0xD2, 0x4C, 0x8D, 0x44, 0x24, 0x20, 0x33, 0xC9, 0xFF, 0xD3, 0x48, 0x83, 0xC4, 0x30, 0x5B, 0xC3};

#ifdef COMPILE_SHELLCODE

void __stdcall LdrLoadDllShellcode(LDR_LOAD_DLL_DATA* data)
{
	HANDLE hDll = 0;
	f_LdrLoadDll _LdrLoadDll = data->pLdrLoadDll;
	f_RtlInitUnicodeString _RltInitUnicodeString = data->pRtlInitUnicodeString;
	UNICODE_STRING unicodePath;
	_RltInitUnicodeString(&unicodePath, data->dllName);
	_LdrLoadDll(NULL, 0, &unicodePath, &hDll);
}

#endif